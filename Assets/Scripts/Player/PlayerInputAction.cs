//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Player/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""KBMPlayer"",
            ""id"": ""e322399a-0897-4b39-bd49-4e46c9bcfc75"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6b830ee3-811f-4b9d-9688-75a03cd08d0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a308c897-b586-425d-b2a9-43955c7dc544"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bb884609-c99b-4524-b148-ca3e70c0130c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""6328675d-736a-4662-960e-1c0ed131dad9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControlBlock"",
                    ""type"": ""Button"",
                    ""id"": ""3ad87865-5527-4b1f-a363-5e9d098dccf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""f90d38e5-4d79-4003-8566-320b270abe32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""7243590f-53e4-4176-949d-3ea66b4ac43a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""2af38dcd-2b9f-4644-a43c-e1d24354f02c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8cf6f96-520f-4a3e-ac01-85d22037093a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KB"",
                    ""id"": ""00c1ac68-ee6a-43f4-9694-34ce18def341"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2431d46f-3bcd-4804-b88a-8e254bb16eeb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e821f2b0-c0dc-4e4d-b7ce-e1dbdd0936c1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""79e68edb-8066-4c6e-8436-63fda6712535"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""17ff06e6-7b77-452f-bfde-69ca40d61bce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""bd719e1c-e964-4e1c-9919-a42d61962e89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""8ca79fae-600f-4b15-b548-70248bacc8f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2f0a5140-1879-4ceb-883d-73633fb9aef6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ced31f-d54b-4d44-972a-815cbd0c1a48"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a3e284f-7480-4ffb-9180-31f219baa6c1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15795cfb-c8bc-483a-954a-9d2fe1030208"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76f1dd18-91d8-4a4b-a516-f4a6736cb00f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35e89958-fa07-414c-8329-d63ff74ac3f9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VRPlayer"",
            ""id"": ""baea3ebe-5e00-4566-85fd-aca98a8c49ea"",
            ""actions"": [
                {
                    ""name"": ""LeftControllerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d6c14dda-8224-4272-91fc-fc59fc64ceab"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b54d1b32-974e-4650-85c6-2c3df5952bed"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftControllerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""84c8597b-36e8-4af4-9898-2e95b8ee4068"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""2c69e8b4-c3b7-40d8-9bad-58a8a697b5b4"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HMDPosition"",
                    ""type"": ""Value"",
                    ""id"": ""59da6209-35b6-4321-bede-840f9f4e807d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HMDRotation"",
                    ""type"": ""Value"",
                    ""id"": ""3bfde6d2-8c81-468e-9082-7a69bdb930fd"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""042e1689-657d-437b-8a00-24154c6fa0c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""4baf5008-5eef-46ff-8e31-2d3c4adb1ea6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerGrab"",
                    ""type"": ""Button"",
                    ""id"": ""5d7cac44-7d5d-48f4-b0bf-7ccb7967bd9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftControllerGrab"",
                    ""type"": ""Button"",
                    ""id"": ""5a4d11e6-67d6-4755-9555-732a38035797"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftEyePosition"",
                    ""type"": ""Value"",
                    ""id"": ""01fe97be-5531-4f65-928d-d27709ccaef3"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightEyePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0b59d937-14a0-498f-b8f1-be8ae7b8f4e7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftEyeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""b56703c0-1733-40a4-97e8-ffeccd29c9a3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightEyeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""c3207273-1016-4f05-9ad3-111dd8ce5062"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6de81e36-86d7-4cec-b651-393996a45d22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4266eacd-eb4d-4eda-868a-10f95a6f7deb"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftControllerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aea8c48-f74e-474b-8803-df42987aee59"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightControllerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c69ddf8f-547f-4792-afe7-73c85faf853c"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftControllerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35391ffc-cba5-44c7-bb9b-5a468df6d7fd"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightControllerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c2ee7f1-2e65-41b4-b7d7-35aee50e7215"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""HMDPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62231fa6-49e6-4f3b-a682-c5412a157ca6"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""HMDRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55d6462-d54c-4532-b1c2-d0d60f2759d9"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f2d01e6-ed72-427c-a9b6-9d79ba4594cc"",
                    ""path"": ""<ViveWand>{LeftHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""103599a4-4b1b-4263-865d-36cffb67fdeb"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2844d8da-04ba-4277-b839-58adde80e639"",
                    ""path"": ""<ViveWand>{RightHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fe5a410-5756-462b-beb4-01f8d7455f3d"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftControllerGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""202bbb90-eb1a-4cb8-a5c4-8d9d7f33f2a6"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightControllerGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87e6bb35-e155-44e8-9923-9b60adc359b9"",
                    ""path"": ""<XRHMD>/leftEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftEyePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""867c8c18-981f-438f-bb49-34040372588c"",
                    ""path"": ""<XRHMD>/rightEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightEyePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daf2a955-af4d-4341-87a7-afd6c22e838f"",
                    ""path"": ""<XRHMD>/leftEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftEyeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf48124c-ab0e-4e7a-be8e-f192caa99c18"",
                    ""path"": ""<XRHMD>/rightEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightEyeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e92b9eb9-3a33-41c3-bf77-07aeba9e60bc"",
                    ""path"": ""<WMRSpatialController>/touchpadClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KBMPlayer
        m_KBMPlayer = asset.FindActionMap("KBMPlayer", throwIfNotFound: true);
        m_KBMPlayer_Look = m_KBMPlayer.FindAction("Look", throwIfNotFound: true);
        m_KBMPlayer_Move = m_KBMPlayer.FindAction("Move", throwIfNotFound: true);
        m_KBMPlayer_Sprint = m_KBMPlayer.FindAction("Sprint", throwIfNotFound: true);
        m_KBMPlayer_Walk = m_KBMPlayer.FindAction("Walk", throwIfNotFound: true);
        m_KBMPlayer_ControlBlock = m_KBMPlayer.FindAction("ControlBlock", throwIfNotFound: true);
        m_KBMPlayer_Grab = m_KBMPlayer.FindAction("Grab", throwIfNotFound: true);
        m_KBMPlayer_Exit = m_KBMPlayer.FindAction("Exit", throwIfNotFound: true);
        m_KBMPlayer_Reset = m_KBMPlayer.FindAction("Reset", throwIfNotFound: true);
        // VRPlayer
        m_VRPlayer = asset.FindActionMap("VRPlayer", throwIfNotFound: true);
        m_VRPlayer_LeftControllerPosition = m_VRPlayer.FindAction("LeftControllerPosition", throwIfNotFound: true);
        m_VRPlayer_RightControllerPosition = m_VRPlayer.FindAction("RightControllerPosition", throwIfNotFound: true);
        m_VRPlayer_LeftControllerRotation = m_VRPlayer.FindAction("LeftControllerRotation", throwIfNotFound: true);
        m_VRPlayer_RightControllerRotation = m_VRPlayer.FindAction("RightControllerRotation", throwIfNotFound: true);
        m_VRPlayer_HMDPosition = m_VRPlayer.FindAction("HMDPosition", throwIfNotFound: true);
        m_VRPlayer_HMDRotation = m_VRPlayer.FindAction("HMDRotation", throwIfNotFound: true);
        m_VRPlayer_Move = m_VRPlayer.FindAction("Move", throwIfNotFound: true);
        m_VRPlayer_Rotate = m_VRPlayer.FindAction("Rotate", throwIfNotFound: true);
        m_VRPlayer_RightControllerGrab = m_VRPlayer.FindAction("RightControllerGrab", throwIfNotFound: true);
        m_VRPlayer_LeftControllerGrab = m_VRPlayer.FindAction("LeftControllerGrab", throwIfNotFound: true);
        m_VRPlayer_LeftEyePosition = m_VRPlayer.FindAction("LeftEyePosition", throwIfNotFound: true);
        m_VRPlayer_RightEyePosition = m_VRPlayer.FindAction("RightEyePosition", throwIfNotFound: true);
        m_VRPlayer_LeftEyeRotation = m_VRPlayer.FindAction("LeftEyeRotation", throwIfNotFound: true);
        m_VRPlayer_RightEyeRotation = m_VRPlayer.FindAction("RightEyeRotation", throwIfNotFound: true);
        m_VRPlayer_Jump = m_VRPlayer.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KBMPlayer
    private readonly InputActionMap m_KBMPlayer;
    private IKBMPlayerActions m_KBMPlayerActionsCallbackInterface;
    private readonly InputAction m_KBMPlayer_Look;
    private readonly InputAction m_KBMPlayer_Move;
    private readonly InputAction m_KBMPlayer_Sprint;
    private readonly InputAction m_KBMPlayer_Walk;
    private readonly InputAction m_KBMPlayer_ControlBlock;
    private readonly InputAction m_KBMPlayer_Grab;
    private readonly InputAction m_KBMPlayer_Exit;
    private readonly InputAction m_KBMPlayer_Reset;
    public struct KBMPlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public KBMPlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_KBMPlayer_Look;
        public InputAction @Move => m_Wrapper.m_KBMPlayer_Move;
        public InputAction @Sprint => m_Wrapper.m_KBMPlayer_Sprint;
        public InputAction @Walk => m_Wrapper.m_KBMPlayer_Walk;
        public InputAction @ControlBlock => m_Wrapper.m_KBMPlayer_ControlBlock;
        public InputAction @Grab => m_Wrapper.m_KBMPlayer_Grab;
        public InputAction @Exit => m_Wrapper.m_KBMPlayer_Exit;
        public InputAction @Reset => m_Wrapper.m_KBMPlayer_Reset;
        public InputActionMap Get() { return m_Wrapper.m_KBMPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KBMPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IKBMPlayerActions instance)
        {
            if (m_Wrapper.m_KBMPlayerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @Walk.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnWalk;
                @ControlBlock.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
                @ControlBlock.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
                @ControlBlock.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
                @Grab.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnGrab;
                @Exit.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnExit;
                @Reset.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_KBMPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @ControlBlock.started += instance.OnControlBlock;
                @ControlBlock.performed += instance.OnControlBlock;
                @ControlBlock.canceled += instance.OnControlBlock;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public KBMPlayerActions @KBMPlayer => new KBMPlayerActions(this);

    // VRPlayer
    private readonly InputActionMap m_VRPlayer;
    private IVRPlayerActions m_VRPlayerActionsCallbackInterface;
    private readonly InputAction m_VRPlayer_LeftControllerPosition;
    private readonly InputAction m_VRPlayer_RightControllerPosition;
    private readonly InputAction m_VRPlayer_LeftControllerRotation;
    private readonly InputAction m_VRPlayer_RightControllerRotation;
    private readonly InputAction m_VRPlayer_HMDPosition;
    private readonly InputAction m_VRPlayer_HMDRotation;
    private readonly InputAction m_VRPlayer_Move;
    private readonly InputAction m_VRPlayer_Rotate;
    private readonly InputAction m_VRPlayer_RightControllerGrab;
    private readonly InputAction m_VRPlayer_LeftControllerGrab;
    private readonly InputAction m_VRPlayer_LeftEyePosition;
    private readonly InputAction m_VRPlayer_RightEyePosition;
    private readonly InputAction m_VRPlayer_LeftEyeRotation;
    private readonly InputAction m_VRPlayer_RightEyeRotation;
    private readonly InputAction m_VRPlayer_Jump;
    public struct VRPlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public VRPlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftControllerPosition => m_Wrapper.m_VRPlayer_LeftControllerPosition;
        public InputAction @RightControllerPosition => m_Wrapper.m_VRPlayer_RightControllerPosition;
        public InputAction @LeftControllerRotation => m_Wrapper.m_VRPlayer_LeftControllerRotation;
        public InputAction @RightControllerRotation => m_Wrapper.m_VRPlayer_RightControllerRotation;
        public InputAction @HMDPosition => m_Wrapper.m_VRPlayer_HMDPosition;
        public InputAction @HMDRotation => m_Wrapper.m_VRPlayer_HMDRotation;
        public InputAction @Move => m_Wrapper.m_VRPlayer_Move;
        public InputAction @Rotate => m_Wrapper.m_VRPlayer_Rotate;
        public InputAction @RightControllerGrab => m_Wrapper.m_VRPlayer_RightControllerGrab;
        public InputAction @LeftControllerGrab => m_Wrapper.m_VRPlayer_LeftControllerGrab;
        public InputAction @LeftEyePosition => m_Wrapper.m_VRPlayer_LeftEyePosition;
        public InputAction @RightEyePosition => m_Wrapper.m_VRPlayer_RightEyePosition;
        public InputAction @LeftEyeRotation => m_Wrapper.m_VRPlayer_LeftEyeRotation;
        public InputAction @RightEyeRotation => m_Wrapper.m_VRPlayer_RightEyeRotation;
        public InputAction @Jump => m_Wrapper.m_VRPlayer_Jump;
        public InputActionMap Get() { return m_Wrapper.m_VRPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IVRPlayerActions instance)
        {
            if (m_Wrapper.m_VRPlayerActionsCallbackInterface != null)
            {
                @LeftControllerPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerPosition;
                @LeftControllerPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerPosition;
                @LeftControllerPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerPosition;
                @RightControllerPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerPosition;
                @RightControllerPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerPosition;
                @RightControllerPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerPosition;
                @LeftControllerRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerRotation;
                @LeftControllerRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerRotation;
                @LeftControllerRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerRotation;
                @RightControllerRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerRotation;
                @RightControllerRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerRotation;
                @RightControllerRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerRotation;
                @HMDPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDPosition;
                @HMDPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDPosition;
                @HMDPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDPosition;
                @HMDRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDRotation;
                @HMDRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDRotation;
                @HMDRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHMDRotation;
                @Move.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRotate;
                @RightControllerGrab.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerGrab;
                @RightControllerGrab.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerGrab;
                @RightControllerGrab.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightControllerGrab;
                @LeftControllerGrab.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerGrab;
                @LeftControllerGrab.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerGrab;
                @LeftControllerGrab.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftControllerGrab;
                @LeftEyePosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @LeftEyePosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @LeftEyePosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @RightEyePosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @RightEyePosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @RightEyePosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @LeftEyeRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @LeftEyeRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @LeftEyeRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @RightEyeRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @RightEyeRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @RightEyeRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @Jump.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_VRPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftControllerPosition.started += instance.OnLeftControllerPosition;
                @LeftControllerPosition.performed += instance.OnLeftControllerPosition;
                @LeftControllerPosition.canceled += instance.OnLeftControllerPosition;
                @RightControllerPosition.started += instance.OnRightControllerPosition;
                @RightControllerPosition.performed += instance.OnRightControllerPosition;
                @RightControllerPosition.canceled += instance.OnRightControllerPosition;
                @LeftControllerRotation.started += instance.OnLeftControllerRotation;
                @LeftControllerRotation.performed += instance.OnLeftControllerRotation;
                @LeftControllerRotation.canceled += instance.OnLeftControllerRotation;
                @RightControllerRotation.started += instance.OnRightControllerRotation;
                @RightControllerRotation.performed += instance.OnRightControllerRotation;
                @RightControllerRotation.canceled += instance.OnRightControllerRotation;
                @HMDPosition.started += instance.OnHMDPosition;
                @HMDPosition.performed += instance.OnHMDPosition;
                @HMDPosition.canceled += instance.OnHMDPosition;
                @HMDRotation.started += instance.OnHMDRotation;
                @HMDRotation.performed += instance.OnHMDRotation;
                @HMDRotation.canceled += instance.OnHMDRotation;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @RightControllerGrab.started += instance.OnRightControllerGrab;
                @RightControllerGrab.performed += instance.OnRightControllerGrab;
                @RightControllerGrab.canceled += instance.OnRightControllerGrab;
                @LeftControllerGrab.started += instance.OnLeftControllerGrab;
                @LeftControllerGrab.performed += instance.OnLeftControllerGrab;
                @LeftControllerGrab.canceled += instance.OnLeftControllerGrab;
                @LeftEyePosition.started += instance.OnLeftEyePosition;
                @LeftEyePosition.performed += instance.OnLeftEyePosition;
                @LeftEyePosition.canceled += instance.OnLeftEyePosition;
                @RightEyePosition.started += instance.OnRightEyePosition;
                @RightEyePosition.performed += instance.OnRightEyePosition;
                @RightEyePosition.canceled += instance.OnRightEyePosition;
                @LeftEyeRotation.started += instance.OnLeftEyeRotation;
                @LeftEyeRotation.performed += instance.OnLeftEyeRotation;
                @LeftEyeRotation.canceled += instance.OnLeftEyeRotation;
                @RightEyeRotation.started += instance.OnRightEyeRotation;
                @RightEyeRotation.performed += instance.OnRightEyeRotation;
                @RightEyeRotation.canceled += instance.OnRightEyeRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public VRPlayerActions @VRPlayer => new VRPlayerActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IKBMPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnControlBlock(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface IVRPlayerActions
    {
        void OnLeftControllerPosition(InputAction.CallbackContext context);
        void OnRightControllerPosition(InputAction.CallbackContext context);
        void OnLeftControllerRotation(InputAction.CallbackContext context);
        void OnRightControllerRotation(InputAction.CallbackContext context);
        void OnHMDPosition(InputAction.CallbackContext context);
        void OnHMDRotation(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnRightControllerGrab(InputAction.CallbackContext context);
        void OnLeftControllerGrab(InputAction.CallbackContext context);
        void OnLeftEyePosition(InputAction.CallbackContext context);
        void OnRightEyePosition(InputAction.CallbackContext context);
        void OnLeftEyeRotation(InputAction.CallbackContext context);
        void OnRightEyeRotation(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
