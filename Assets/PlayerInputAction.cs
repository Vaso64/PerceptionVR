//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""KBMPlayer"",
            ""id"": ""e322399a-0897-4b39-bd49-4e46c9bcfc75"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6b830ee3-811f-4b9d-9688-75a03cd08d0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a308c897-b586-425d-b2a9-43955c7dc544"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bb884609-c99b-4524-b148-ca3e70c0130c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControlBlock"",
                    ""type"": ""Button"",
                    ""id"": ""3ad87865-5527-4b1f-a363-5e9d098dccf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8cf6f96-520f-4a3e-ac01-85d22037093a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KB"",
                    ""id"": ""00c1ac68-ee6a-43f4-9694-34ce18def341"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2431d46f-3bcd-4804-b88a-8e254bb16eeb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e821f2b0-c0dc-4e4d-b7ce-e1dbdd0936c1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""79e68edb-8066-4c6e-8436-63fda6712535"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""17ff06e6-7b77-452f-bfde-69ca40d61bce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""bd719e1c-e964-4e1c-9919-a42d61962e89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""8ca79fae-600f-4b15-b548-70248bacc8f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2f0a5140-1879-4ceb-883d-73633fb9aef6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ced31f-d54b-4d44-972a-815cbd0c1a48"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VRPlayer"",
            ""id"": ""baea3ebe-5e00-4566-85fd-aca98a8c49ea"",
            ""actions"": [
                {
                    ""name"": ""LeftEyePosition"",
                    ""type"": ""Value"",
                    ""id"": ""97f4c488-a77f-4fb2-9db4-0e0ebc4466f4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d6c14dda-8224-4272-91fc-fc59fc64ceab"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightEyePosition"",
                    ""type"": ""Value"",
                    ""id"": ""599eca9b-2429-4e5f-8921-21e41619b633"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b54d1b32-974e-4650-85c6-2c3df5952bed"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftEyeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""dd089204-c8d7-41b6-abd1-73b35e2c9bf7"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""84c8597b-36e8-4af4-9898-2e95b8ee4068"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightEyeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""277e84e8-a09d-42ac-9f32-3ca2e7260889"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""2c69e8b4-c3b7-40d8-9bad-58a8a697b5b4"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadPosition"",
                    ""type"": ""Value"",
                    ""id"": ""59da6209-35b6-4321-bede-840f9f4e807d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""Value"",
                    ""id"": ""3bfde6d2-8c81-468e-9082-7a69bdb930fd"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4ee7d1c-9eb0-45bf-8fa7-75d56be1e2a8"",
                    ""path"": ""<XRHMD>/leftEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftEyePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""342994f7-33e1-4908-9afc-c167aa3fc3af"",
                    ""path"": ""<XRHMD>/rightEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightEyePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d8cbfd3-03cd-4ea3-bdf9-9fc0a8db7002"",
                    ""path"": ""<XRHMD>/leftEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftEyeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e883d6d1-3110-42b2-9f24-525c905d659c"",
                    ""path"": ""<XRHMD>/rightEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightEyeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4266eacd-eb4d-4eda-868a-10f95a6f7deb"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aea8c48-f74e-474b-8803-df42987aee59"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c69ddf8f-547f-4792-afe7-73c85faf853c"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LeftHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35391ffc-cba5-44c7-bb9b-5a468df6d7fd"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c2ee7f1-2e65-41b4-b7d7-35aee50e7215"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62231fa6-49e6-4f3b-a682-c5412a157ca6"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KBMPlayer
        m_KBMPlayer = asset.FindActionMap("KBMPlayer", throwIfNotFound: true);
        m_KBMPlayer_Look = m_KBMPlayer.FindAction("Look", throwIfNotFound: true);
        m_KBMPlayer_Move = m_KBMPlayer.FindAction("Move", throwIfNotFound: true);
        m_KBMPlayer_Sprint = m_KBMPlayer.FindAction("Sprint", throwIfNotFound: true);
        m_KBMPlayer_ControlBlock = m_KBMPlayer.FindAction("ControlBlock", throwIfNotFound: true);
        // VRPlayer
        m_VRPlayer = asset.FindActionMap("VRPlayer", throwIfNotFound: true);
        m_VRPlayer_LeftEyePosition = m_VRPlayer.FindAction("LeftEyePosition", throwIfNotFound: true);
        m_VRPlayer_LeftHandPosition = m_VRPlayer.FindAction("LeftHandPosition", throwIfNotFound: true);
        m_VRPlayer_RightEyePosition = m_VRPlayer.FindAction("RightEyePosition", throwIfNotFound: true);
        m_VRPlayer_RightHandPosition = m_VRPlayer.FindAction("RightHandPosition", throwIfNotFound: true);
        m_VRPlayer_LeftEyeRotation = m_VRPlayer.FindAction("LeftEyeRotation", throwIfNotFound: true);
        m_VRPlayer_LeftHandRotation = m_VRPlayer.FindAction("LeftHandRotation", throwIfNotFound: true);
        m_VRPlayer_RightEyeRotation = m_VRPlayer.FindAction("RightEyeRotation", throwIfNotFound: true);
        m_VRPlayer_RightHandRotation = m_VRPlayer.FindAction("RightHandRotation", throwIfNotFound: true);
        m_VRPlayer_HeadPosition = m_VRPlayer.FindAction("HeadPosition", throwIfNotFound: true);
        m_VRPlayer_HeadRotation = m_VRPlayer.FindAction("HeadRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KBMPlayer
    private readonly InputActionMap m_KBMPlayer;
    private IKBMPlayerActions m_KBMPlayerActionsCallbackInterface;
    private readonly InputAction m_KBMPlayer_Look;
    private readonly InputAction m_KBMPlayer_Move;
    private readonly InputAction m_KBMPlayer_Sprint;
    private readonly InputAction m_KBMPlayer_ControlBlock;
    public struct KBMPlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public KBMPlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_KBMPlayer_Look;
        public InputAction @Move => m_Wrapper.m_KBMPlayer_Move;
        public InputAction @Sprint => m_Wrapper.m_KBMPlayer_Sprint;
        public InputAction @ControlBlock => m_Wrapper.m_KBMPlayer_ControlBlock;
        public InputActionMap Get() { return m_Wrapper.m_KBMPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KBMPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IKBMPlayerActions instance)
        {
            if (m_Wrapper.m_KBMPlayerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnSprint;
                @ControlBlock.started -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
                @ControlBlock.performed -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
                @ControlBlock.canceled -= m_Wrapper.m_KBMPlayerActionsCallbackInterface.OnControlBlock;
            }
            m_Wrapper.m_KBMPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @ControlBlock.started += instance.OnControlBlock;
                @ControlBlock.performed += instance.OnControlBlock;
                @ControlBlock.canceled += instance.OnControlBlock;
            }
        }
    }
    public KBMPlayerActions @KBMPlayer => new KBMPlayerActions(this);

    // VRPlayer
    private readonly InputActionMap m_VRPlayer;
    private IVRPlayerActions m_VRPlayerActionsCallbackInterface;
    private readonly InputAction m_VRPlayer_LeftEyePosition;
    private readonly InputAction m_VRPlayer_LeftHandPosition;
    private readonly InputAction m_VRPlayer_RightEyePosition;
    private readonly InputAction m_VRPlayer_RightHandPosition;
    private readonly InputAction m_VRPlayer_LeftEyeRotation;
    private readonly InputAction m_VRPlayer_LeftHandRotation;
    private readonly InputAction m_VRPlayer_RightEyeRotation;
    private readonly InputAction m_VRPlayer_RightHandRotation;
    private readonly InputAction m_VRPlayer_HeadPosition;
    private readonly InputAction m_VRPlayer_HeadRotation;
    public struct VRPlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public VRPlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftEyePosition => m_Wrapper.m_VRPlayer_LeftEyePosition;
        public InputAction @LeftHandPosition => m_Wrapper.m_VRPlayer_LeftHandPosition;
        public InputAction @RightEyePosition => m_Wrapper.m_VRPlayer_RightEyePosition;
        public InputAction @RightHandPosition => m_Wrapper.m_VRPlayer_RightHandPosition;
        public InputAction @LeftEyeRotation => m_Wrapper.m_VRPlayer_LeftEyeRotation;
        public InputAction @LeftHandRotation => m_Wrapper.m_VRPlayer_LeftHandRotation;
        public InputAction @RightEyeRotation => m_Wrapper.m_VRPlayer_RightEyeRotation;
        public InputAction @RightHandRotation => m_Wrapper.m_VRPlayer_RightHandRotation;
        public InputAction @HeadPosition => m_Wrapper.m_VRPlayer_HeadPosition;
        public InputAction @HeadRotation => m_Wrapper.m_VRPlayer_HeadRotation;
        public InputActionMap Get() { return m_Wrapper.m_VRPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IVRPlayerActions instance)
        {
            if (m_Wrapper.m_VRPlayerActionsCallbackInterface != null)
            {
                @LeftEyePosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @LeftEyePosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @LeftEyePosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyePosition;
                @LeftHandPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandPosition;
                @LeftHandPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandPosition;
                @LeftHandPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandPosition;
                @RightEyePosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @RightEyePosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @RightEyePosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyePosition;
                @RightHandPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandPosition;
                @RightHandPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandPosition;
                @RightHandPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandPosition;
                @LeftEyeRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @LeftEyeRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @LeftEyeRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftEyeRotation;
                @LeftHandRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandRotation;
                @LeftHandRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandRotation;
                @LeftHandRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnLeftHandRotation;
                @RightEyeRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @RightEyeRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @RightEyeRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightEyeRotation;
                @RightHandRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandRotation;
                @RightHandRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandRotation;
                @RightHandRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRightHandRotation;
                @HeadPosition.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadPosition;
                @HeadPosition.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadPosition;
                @HeadPosition.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadPosition;
                @HeadRotation.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadRotation;
                @HeadRotation.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadRotation;
                @HeadRotation.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnHeadRotation;
            }
            m_Wrapper.m_VRPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftEyePosition.started += instance.OnLeftEyePosition;
                @LeftEyePosition.performed += instance.OnLeftEyePosition;
                @LeftEyePosition.canceled += instance.OnLeftEyePosition;
                @LeftHandPosition.started += instance.OnLeftHandPosition;
                @LeftHandPosition.performed += instance.OnLeftHandPosition;
                @LeftHandPosition.canceled += instance.OnLeftHandPosition;
                @RightEyePosition.started += instance.OnRightEyePosition;
                @RightEyePosition.performed += instance.OnRightEyePosition;
                @RightEyePosition.canceled += instance.OnRightEyePosition;
                @RightHandPosition.started += instance.OnRightHandPosition;
                @RightHandPosition.performed += instance.OnRightHandPosition;
                @RightHandPosition.canceled += instance.OnRightHandPosition;
                @LeftEyeRotation.started += instance.OnLeftEyeRotation;
                @LeftEyeRotation.performed += instance.OnLeftEyeRotation;
                @LeftEyeRotation.canceled += instance.OnLeftEyeRotation;
                @LeftHandRotation.started += instance.OnLeftHandRotation;
                @LeftHandRotation.performed += instance.OnLeftHandRotation;
                @LeftHandRotation.canceled += instance.OnLeftHandRotation;
                @RightEyeRotation.started += instance.OnRightEyeRotation;
                @RightEyeRotation.performed += instance.OnRightEyeRotation;
                @RightEyeRotation.canceled += instance.OnRightEyeRotation;
                @RightHandRotation.started += instance.OnRightHandRotation;
                @RightHandRotation.performed += instance.OnRightHandRotation;
                @RightHandRotation.canceled += instance.OnRightHandRotation;
                @HeadPosition.started += instance.OnHeadPosition;
                @HeadPosition.performed += instance.OnHeadPosition;
                @HeadPosition.canceled += instance.OnHeadPosition;
                @HeadRotation.started += instance.OnHeadRotation;
                @HeadRotation.performed += instance.OnHeadRotation;
                @HeadRotation.canceled += instance.OnHeadRotation;
            }
        }
    }
    public VRPlayerActions @VRPlayer => new VRPlayerActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IKBMPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnControlBlock(InputAction.CallbackContext context);
    }
    public interface IVRPlayerActions
    {
        void OnLeftEyePosition(InputAction.CallbackContext context);
        void OnLeftHandPosition(InputAction.CallbackContext context);
        void OnRightEyePosition(InputAction.CallbackContext context);
        void OnRightHandPosition(InputAction.CallbackContext context);
        void OnLeftEyeRotation(InputAction.CallbackContext context);
        void OnLeftHandRotation(InputAction.CallbackContext context);
        void OnRightEyeRotation(InputAction.CallbackContext context);
        void OnRightHandRotation(InputAction.CallbackContext context);
        void OnHeadPosition(InputAction.CallbackContext context);
        void OnHeadRotation(InputAction.CallbackContext context);
    }
}
